#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"
#include "zmk-helpers/unicode-chars/german.dtsi"

#define DEF 0
#define NAV 1
#define NUM 2
#define SYS 3

#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* Nav cluster */

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_MOD_MORPH(NAME, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Custom behaviors */

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: ? | shift + tap: / | ctrl + shift + tap: BACKSLASH
SIMPLE_MORPH(qmark_morph, SFT, &kp QMARK, &qmark_inner_morph)
SIMPLE_MORPH(qmark_inner_morph, CTL, &kp FSLH, &kp BSLH)

// tap: " | shift + tap: ' | ctrl + shift + tap: `
SIMPLE_MORPH(quote_morph, SFT, &kp DQT, &quote_inner_morph)
SIMPLE_MORPH(quote_inner_morph, CTL, &kp SQT, &kp GRAVE)

SIMPLE_MORPH(equal_morph, SFT, &kp EQUAL, &kp PLUS)         // tap: = | shift + tap: +
SIMPLE_MORPH(minus_morph, SFT, &kp MINUS, &kp UNDER)        // tap: - | shift + tap: _
SIMPLE_MORPH(lbkt_morph, SFT, &kp LBKT, &kp LBRC)           // tap: [ | shift + tap: {
SIMPLE_MORPH(rbkt_morph, SFT, &kp RBKT, &kp RBRC)           // tap: ] | shift + tap: }
SIMPLE_MORPH(pipe_morph, SFT, &kp PIPE, &kp TILDE)          // tap: | | shift + tap: ~
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &kp LESS_THAN)    // tap: , | shift + tap: <
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &kp GREATER_THAN)     // tap: . | shift + tap: >

// Press strg alt and win at the same time with one keypress
SIMPLE_MORPH(w_a_s_morph, SFT, &kp W, &kp A, &kp S)          // tap: win + alt + strg

#define NAV_LEFT    &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT   &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP      &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN    &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document

#define BSPC_MORPH  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define DEL_MORPH   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

/* Keymap */
ZMK_CONDITIONAL_LAYER(sys, NAV NUM, SYS)  // NAV + NUM --> SYS

/* Keymap Default Layer */
ZMK_LAYER(default,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &equal_morph     &kp Q         &kp W         &kp E         &kp R         &kp T                 &kp Y         &kp U        &kp I          &kp O        &kp P       &minus_morph    
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤
      &lbkt_morph  &hml LGUI A   &hml LALT S  &hml LCTRL D  &hml LSHFT F      &kp G                  &kp H     &hmr RSHFT J  &hmr LCTRL K   &hmr LALT L &hmr LGUI SEMI  &rbkt_morph
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤
      &pipe_morph      &kp Z         &kp X          &kp C         &kp V         &kp B                &kp N         &kp M      &comma_morph   &dot_morph  &qmark_morph  &quote_morph
//  ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────├       ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                &lt NAV ESC   BSPC_MORPH     DEL_MORPH             &kp ENTER     &kp SPACE    &lt NUM TAB
//                                            ╰─────────────┴─────────────┴─────────────╯       ╰─────────────┴─────────────┴─────────────╯
)

/* Keymap Nav Layer */
ZMK_LAYER(nav,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          XXX         &kp ESC      BSPC_MORPH     DEL_MORPH   w_a_s_morph&kp C_VOL_UP           &kp PG_UP        XXX         NAV_UP          XXX        &kp PSCRN     &kp SLCK
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤
          XXX         &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT    &kp C_MUTE             &kp PG_DN     NAV_LEFT      NAV_DOWN      NAV_RIGHT     &kp INS      &kp CLCK 
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤
          XXX           XXX           XXX           XXX           XXX      &kp C_VOL_DN               XXX           XXX           XXX           XXX         &kp RET      &kp K_APP
//  ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────├       ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                    ___           ___           ___                   ___           ___          ___
//                                            ╰─────────────┴─────────────┴─────────────╯       ╰─────────────┴─────────────┴─────────────╯
)

/* Keymap Num Layer */
ZMK_LAYER(num,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &equal_morph    &kp EXCL      &kp AT       &kp HASH      &kp DLLR      &kp PRCNT             &kp CARET      &kp AMPS      &kp STAR     &kp LPAR      &kp RPAR     &minus_morph
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤
          XXX      &hml LGUI N1  &hml LALT N2  &hml LCTRL N3 &hml LSHFT N4    &kp N5                &kp N6     &hmr RSHFT N7 &hmr LCTRL N8  &hmr LALT N9  &hmr LGUI N0      XXX
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤
      &mt LGUI F1      &kp F2         &kp F3       &kp F4        &kp F5        &kp F6                &kp F7        &kp F8       &kp F9        &kp F10       &kp F11       &kp F12           
//  ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────├       ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                    ___           ___           ___                   ___           ___           ___
//                                            ╰─────────────┴─────────────┴─────────────╯       ╰─────────────┴─────────────┴─────────────╯
)

/* Keymap Sys Layer */
ZMK_LAYER(sys,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &bootloader       XXX           XXX           XXX           XXX           XXX                   XXX           XXX           XXX           XXX           XXX       &bootloader 
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤
      &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────┤
      &sys_reset        XXX           XXX           XXX           XXX           XXX                   XXX           XXX           XXX           XXX           XXX        &sys_reset 
//  ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────├       ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                    ___           XXX           XXX                   XXX           XXX           ___     
//                                            ╰─────────────┴─────────────┴─────────────╯       ╰─────────────┴─────────────┴─────────────╯
)
